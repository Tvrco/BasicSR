# general settings
name: BSRFSRGAN_Celeb30_BS1_L1_300k_T4_byori
model_type: FSRGANModel
scale: 8
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: celeba
    type: FSRDataset # dataset no face(NO LPE)
    dataroot_gt: ./datasets/inference/HR
    dataroot_lq16: ./datasets/inference/LR
    dataroot_lq32: ./datasets/inference/celeb_32
    dataroot_lq64: ./datasets/inference/celeb_64
    filename_tmpl: '{}'
    io_backend:
      type: disk

    gt_size: 128
    use_hflip: false
    use_rot: false

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 6
    batch_size_per_gpu: 1
    dataset_enlarge_ratio: 10
    prefetch_mode: ~
  val:
    name: celeba_val
    type: PairedImageDataset
    dataroot_gt: ./datasets/inference/HR
    dataroot_lq: ./datasets/inference/LR
    io_backend:
      type: disk
  # val_2:
  #   name: DF2kVAL
  #   type: PairedImageDataset
  #   dataroot_gt: ./datasets/DF2K_val/GTmod4
  #   dataroot_lq: ./datasets/DF2K_val/LRbicx4
  #   io_backend:
  #     type: disk

# network structures
network_g:
  type: BSRFSR
  num_out_ch: 3
  conv : BSConvU

network_d:
  type: VGGStyleDiscriminator
  num_in_ch: 3
  num_feat: 64
# path
path:
  pretrain_network_g: experiments/BSRFSR_Celeb30_BS1_L1_50k_V100/models/net_g_latest.pth
  strict_load_g: false
  resume_state: ~
# training settings
train:
  optim_g:
    type: Adam
    lr: !!float 1e-5
    weight_decay: 0
    betas: [0.9, 0.999]
  optim_d:
    type: Adam
    lr: !!float 1e-5
    weight_decay: 0
    betas: [0.9, 0.99]
  scheduler:
    type: CosineAnnealingRestartLR
    periods: [300000]
    restart_weights: [1]
    eta_min: !!float 1e-7


  total_iter: 300000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
  perceptual_opt:
      type: PerceptualLoss
      layer_weights:
        'conv5_4': 1  # before relu
      vgg_type: vgg19
      use_input_norm: true
      range_norm: false
      perceptual_weight: 1.0
      style_weight: 0
      criterion: l1
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1

  # net_d_iters: 1
  # net_d_init_iters: 0

# validation settings
val:
  val_freq: !!float 2e4
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: True
    ssim:
      type: calculate_ssim
      crop_border: 4
      test_y_channel: True
    nqie:
      type: calculate_niqe
      crop_border: 4
# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 1e4
  use_tb_logger: false
  # wandb:
  #   project: ~
  #   resume_id: ~
  #   entity: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
# cd BasicSR
# CUDA_VISIBLE_DEVICES=1 nohup python -u basicsr/train.py -opt options/train/FSR/train_LapSRNV4.1_x8.yml > runlog/train_LapSRNV4.1_x8.log 2>&1 &

# CUDA_VISIBLE_DEVICES=0,1 \
# nohup python -m torch.distributed.launch --nproc_per_node=2 --master_port=25322 \
# basicsr/train.py -opt options/train/FSR/train_LapSRNV4.10_x8.yml --launcher pytorch > runlog/train_LapSRNV4.10_600k_T4_2.log 2>&1 &

# ps -ef | grep  train_BSRFSR* | grep -v grep | awk '{print $2}' | xargs kill -9

